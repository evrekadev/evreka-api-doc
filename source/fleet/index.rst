Fleet Module
=================

Weighing
----------------

.. table::

   +-------------------+--------------------------------------------+
   | POST               | ``/fleet/weighing``                       |
   +-------------------+--------------------------------------------+

Data Structure
^^^^^^^^^^^^^^^^^

.. table::
    :width: 100%

    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | Field Name              | Data Type                                                    | Description                                       | Value                                                 |
    +=========================+==============================================================+===================================================+=======================================================+
    | vehicle_plate           | string *(optional)*                                          | Vehicle Plate                                     | 06EVR06                                               |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | device_identifier       | string *(required)*                                          | Device Identifier                                 | 111111111111111                                       |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | record_time             | `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_         | Record Time                                       | 2024-05-27T09:00:00Z                                  |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | location                | dict *(required)*                                            | Location Data                                     | {"latitude": 39.897545, "longitude": 32.7735711}      |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | location.latitude       | float *(required)*                                           | Latitude                                          | 39.897545                                             |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | location.longitude      | float *(required)*                                           | Longitude                                         | 32.7735711                                            |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | weight                  | dict *(required)*                                            | Weight Data                                       | {"gross": 20, "tare": 5, "net": 15}                   |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | weight.gross            | float *(optional)*                                           | Gross Weight                                      | 20                                                    |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | weight.tare             | float *(optional)*                                           | Tare Weight                                       | 5                                                     |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | weight.net              | float *(required)*                                           | Net Weight                                        | 15                                                    |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | tags                    | array *(optional)*                                           | Tag List                                          | ["tag1", "tag2"]                                      |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+

Example Code
^^^^^^^^^^^^^^^^^

.. code-block:: python

    import requests

    EVREKA360_API_BASE_URL = ""
    ACCESS_TOKEN = ""

    service_url = "/fleet/weighing"
    headers = {
        "Content-Type": "application/json; charset=utf-8",
        "Authorization": "Bearer " + ACCESS_TOKEN
    }

    data = {
        "vehicle_plate": "06EVR06",
        "device_identifier": "111111111111111",
        "record_time": "2024-05-27T09:00:00Z",
        "location": {
            "latitude": 39.897545,
            "longitude": 32.7735711
        },
        "weight": {
            "gross": 20,
            "tare": 5,
            "net": 15,
        },
        "tags": ["tag1", "tag2"]
    }

    resp = requests.post(EVREKA360_API_BASE_URL + service_url, headers=headers, json=data)
    print(resp.status_code, resp.json())

Response
^^^^^^^^^^^^^^^^^
*Status Code:* ``200`` - Retrieved successfully
*Content Type:* ``application/json``
*Body:*

.. code-block:: json

    {
        "trace_id": "TRACE ID"
    }

.. code-block:: tex

Status Code:* ``400`` - Bad request
*Content Type:* ``application/json``
*Body:*

.. code-block:: json


    {
        "detail":"An error occurred while creating the Weight Record"
    }


Location
----------------
This endpoint is used to send the location data of fleet vehicle.

.. table::

   +-------------------+--------------------------------------------+
   | POST               | ``/fleet/location``                       |
   +-------------------+--------------------------------------------+

Data Structure
^^^^^^^^^^^^^^^^^

.. table::
    :width: 100%

    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | Field Name              | Data Type                                                    | Description                                       | Value                                                 |
    +=========================+==============================================================+===================================================+=======================================================+
    | vehicle_plate           | string *(optional)*                                          | Vehicle Plate                                     | 06EVR06                                               |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | device_identifier       | string *(required)*                                          | Device Identifier                                 | 111111111111111                                       |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | record_time             | `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_         | Record Time                                       | 2024-05-27T09:00:00Z                                  |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | location                | dict *(required)*                                            | Location Data                                     | {"latitude": 39.897545, "longitude": 32.773571}       |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | location.latitude       | float *(required)*                                           | Latitude                                          | 39.897545                                             |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | location.longitude      | float *(required)*                                           | Longitude                                         | 32.773571                                             |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | accuracy                | float *(optional)*                                           | Accuracy                                          | 1                                                     |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | speed                   | float *(required)*                                           | Speed                                             | 30                                                    |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | bearing                 | float *(optional)*                                           | Bearing                                           | 1                                                     |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+
    | battery                 | float *(optional)*                                           | Battery                                           | 10                                                    |
    +-------------------------+--------------------------------------------------------------+---------------------------------------------------+-------------------------------------------------------+

Example Code
^^^^^^^^^^^^^^^^^

.. code-block:: python

    import requests

    EVREKA360_API_BASE_URL = ""
    ACCESS_TOKEN = ""

    service_url = "/fleet/location"
    headers = {
        "Content-Type": "application/json; charset=utf-8",
        "Authorization": "Bearer " + ACCESS_TOKEN
    }

    data = {
        "record_time": "2023-10-01T12:00:00Z",
        "location": {
            "longitude": 10.7128,
            "latitude": 20.0060
        },
        "accuracy": 5.0,
        "speed": 50.0,
        "battery": 95,
        "bearing": 180.0,
        "device_identifier": "111111111"
    }

    resp = requests.post(EVREKA360_API_BASE_URL + service_url, headers=headers, json=data)
    print(resp.status_code, resp.json())

Response
^^^^^^^^^^^^^^^^^
*Status Code:* ``200`` - Retrieved successfully
*Content Type:* ``application/json``
*Body:*

.. code-block:: json

    {
        "trace_id": "TRACE ID"
    }

.. code-block:: tex

Status Code:* ``400`` - Bad request
*Content Type:* ``application/json``
*Body:*

.. code-block:: json


    {
        "detail":"An error occurred while creating the GPS Record"
    }